import datetime
from aiogram import F, Bot, Router
from aiogram.types import Message, CallbackQuery, LabeledPrice, ShippingQuery, PreCheckoutQuery
from aiogram.filters import CommandStart

from sqlalchemy.ext.asyncio import AsyncSession

from app.database.dao.sub import add_subscription, delete_subscription, get_subscription_by_user_id
from app.keyboards.reply import get_keyboard, get_menu_keyboard
from app.keyboards.inline import get_callback_btns

from app.common.text import premium_text

from app.config import settings


# from tests.test_data import data_user, data_filter


premium_router = Router()


premium_kb = get_keyboard(
    "üíé–ú–ï–°–Ø–¶",
    "üíé–ì–û–î",
    "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    "–ù–∞–∑–∞–¥",
    sizes=(2, 1, 1, )
)
    
    
@premium_router.message(F.text == "üíéPremium")
async def premium(message: Message, session: AsyncSession):
    await message.answer(premium_text, reply_markup=premium_kb)
        
        
@premium_router.message(F.text == "1m")
async def minute(message: Message, session: AsyncSession):
    sub = await get_subscription_by_user_id(session, message.from_user.id)
    if sub:
        await message.answer("–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        return        
    current_date = datetime.datetime.now()
    finish_date = current_date + datetime.timedelta(minutes=1)
    
    data = {
        "user_id": message.from_user.id,
        "finish_date": finish_date,
        "subscription_type": "month"
    }

    await add_subscription(session, data)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–∏–Ω—É—Ç—É!", reply_markup=await get_menu_keyboard(user_id=message.from_user.id))

        
@premium_router.message(F.text == "üíé–ú–ï–°–Ø–¶")
async def month(message: Message, session: AsyncSession, bot: Bot):
    sub = await get_subscription_by_user_id(session, message.from_user.id)
    if sub:
        await message.answer("–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        return
    
    PRICE = LabeledPrice(label='Premium-–ø–æ–¥–ø–∏—Å–∫–∞', amount=199 * 100)
    TOKEN = settings.PAYMENT_TOKEN
    #await add_order_db(data)
    await bot.send_invoice(
                            message.from_user.id,
                            title='1 –ú–µ—Å—è—Ü',
                            description='–û–ø–ª–∞—Ç–∞',
                            provider_token=TOKEN,
                            currency='rub',
                            photo_url='https://i.pinimg.com/originals/4d/a0/bb/4da0bbb45aa953339a7e7cd9535884f5.jpg',
                            photo_height=900,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                            photo_width=900,
                            photo_size=200,
                            is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                            prices=[PRICE],
                            start_parameter='time-machine-example',
                            payload='some-invoice-payload-for-our-internal-use',
                            request_timeout=60
    )
        
    await message.answer("–û–ø–ª–∞—Ç–∏–ª–∏?", reply_markup=get_callback_btns(btns={"–û–ø–ª–∞—Ç–∏–ª": "month"}))    
    
    
        
        
@premium_router.callback_query(F.data == "month")
async def active_month(callback: CallbackQuery, session: AsyncSession):
    current_date = datetime.datetime.now()
    finish_date = current_date + datetime.timedelta(days=30)
    
    data = {
        "user_id": callback.from_user.id,
        "finish_date": finish_date,
        "subscription_type": "month"
    }

    await add_subscription(session, data)
    await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü!")
        
        
        
@premium_router.message(F.text == "üíé–ì–û–î")
async def month(message: Message, session: AsyncSession, bot: Bot):
    sub = await get_subscription_by_user_id(session, message.from_user.id)
    if sub:
        await message.answer("–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        return
    
    PRICE = LabeledPrice(label='Premium-–ø–æ–¥–ø–∏—Å–∫–∞', amount=999 * 100)
    TOKEN = settings.PAYMENT_TOKEN
    #await add_order_db(data)
    await bot.send_invoice(
                            chat_id=message.from_user.id,
                            title='1 –≥–æ–¥',
                            description='–û–ø–ª–∞—Ç–∞',
                            provider_token=TOKEN,
                            currency='rub',
                            photo_url='https://i.pinimg.com/originals/4d/a0/bb/4da0bbb45aa953339a7e7cd9535884f5.jpg',
                            photo_height=1280,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                            photo_width=1026,
                            photo_size=1000,
                            is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                            prices=[PRICE],
                            start_parameter='time-machine-example',
                            payload='some-invoice-payload-for-our-internal-use',
                            request_timeout=60
    )
    
    await message.answer("–û–ø–ª–∞—Ç–∏–ª–∏?", reply_markup=get_callback_btns(btns={"–û–ø–ª–∞—Ç–∏–ª": "year"}))
        


@premium_router.callback_query(F.data == "year")
async def active_month(callback: CallbackQuery, session: AsyncSession):
    current_date = datetime.datetime.now()
    finish_date = current_date + datetime.timedelta(days=365)
    
    data = {
        "user_id": callback.from_user.id,
        "finish_date": finish_date,
        "subscription_type": "year"
    }

    await add_subscription(session, data)
    await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥!")



@premium_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def refuse_subscription(message: Message, session: AsyncSession):
    sub = await get_subscription_by_user_id(session, message.from_user.id)
    if sub:
        await delete_subscription(session, message.from_user.id)
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!")
        
        
        
# -------------------------- Payment ------------------------- #
    
    
@premium_router.shipping_query(F.shipping_query)
async def shipping(shipping_query: ShippingQuery):
    await shipping_query.answer(ok=True)
    print("SHIPPING: ")
    print(shipping_query)
    
    
@premium_router.pre_checkout_query(F.pre_checkout_query)
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    print(pre_checkout_query)