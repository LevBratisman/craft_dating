from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from app.keyboards.inline import get_callback_btns
from app.keyboards.reply import get_keyboard

from app.database.dao.user import add_user, get_uni_id_by_user_id
from app.database.dao.project import add_project, get_project_by_id, get_projects_by_user_id, delete_project_by_id, update_project_by_id

from app.keyboards.reply import get_menu_keyboard


base_project_router = Router()


profile_kb = get_keyboard(
    "üîÑ",
    "üìù",
    "üñº",
    "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã",
    "–í—ã–ª–æ–∂–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
    "–ù–∞–∑–∞–¥",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(3, 2, 1)
)

confirm_kb = get_callback_btns(
    btns={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å": "–û—Ç–º–µ–Ω–∏—Ç—å"},
)


class UpdateProject(StatesGroup):
    project_id = State()
    project_name = State()
    project_description = State()
    project_requirements = State()
    project_image = State()
    project_confirm = State()
    
    
    
    
@base_project_router.message(StateFilter(None), F.text == "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
async def get_my_projects(message: Message, session: AsyncSession):
    projects = await get_projects_by_user_id(session, message.from_user.id)
    
    if projects:
        for project in projects:
            if project.project_image:
                await message.answer_photo(photo=project.project_image, caption=f'<b>{project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{project.project_requirements}', reply_markup=get_callback_btns(btns={"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"delete_project_{project.id}", "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"update_project_{project.id}"}))
            else:
                await message.answer(f'<b>{project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{project.project_requirements}', reply_markup=get_callback_btns(btns={"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"delete_project_{project.id}", "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"update_project_{project.id}"}))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    

@base_project_router.callback_query(StateFilter(None), F.data.contains("delete_project_"))
async def delete_project(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    project_id = int(callback.data.split("_")[2])
    await delete_project_by_id(session, project_id)
    await callback.answer("–ü—Ä–æ–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω")
    await callback.message.delete()
    await callback.message.answer("–ü—Ä–æ–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=profile_kb)
    
    
# ----------------------------------------UPDATE PROJECT FSM---------------------------------------
    
@base_project_router.callback_query(StateFilter(None), F.data.contains("update_project_"))
async def update_project(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    project_id = int(callback.data.split("_")[2])
    
    current_project = await get_project_by_id(session, project_id)
    
    await state.set_state(UpdateProject.project_name)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    
    print(await state.get_state())
    
    await state.update_data(project_id=project_id)
    await state.update_data(project_name=current_project.project_name)
    await state.update_data(project_description=current_project.project_description)
    await state.update_data(project_requirements=current_project.project_requirements)
    await state.update_data(project_image=current_project.project_image)
    
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=get_keyboard("–ù–µ –º–µ–Ω—è—Ç—å"))
    
    print(await state.get_state())
    
    
@base_project_router.message(StateFilter(UpdateProject.project_name), F.text)
async def keep_old_name(message: Message, state: FSMContext):
    if message.text != "–ù–µ –º–µ–Ω—è—Ç—å":
        await state.update_data(project_name=message.text)
    await state.set_state(UpdateProject.project_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    
    
    
@base_project_router.message(StateFilter(UpdateProject.project_description), F.text)
async def keep_old_desc(message: Message, state: FSMContext):
    if message.text != "–ù–µ –º–µ–Ω—è—Ç—å":
        await state.update_data(project_description=message.text)
    await state.set_state(UpdateProject.project_requirements)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É")
    
        
    
@base_project_router.message(StateFilter(UpdateProject.project_requirements), F.text)
async def keep_old_req(message: Message, state: FSMContext):
    if message.text != "–ù–µ –º–µ–Ω—è—Ç—å":
        await state.update_data(project_requirements=message.text)
    await state.set_state(UpdateProject.project_image)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=get_keyboard("–ù–µ –º–µ–Ω—è—Ç—å", "–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", sizes=(1, )))
    
        
    
@base_project_router.message(StateFilter(UpdateProject.project_image), F.photo)
@base_project_router.message(StateFilter(UpdateProject.project_image), F.text)
async def keep_old_img(message: Message, state: FSMContext):
    
    if message.text == "–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await state.update_data(project_image=None)
    elif message.text != "–ù–µ –º–µ–Ω—è—Ç—å":
        await state.update_data(project_image=message.photo[-1].file_id)
    
    await state.set_state(UpdateProject.project_confirm)
    data = await state.get_data()
    
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=ReplyKeyboardRemove())
    
    if data["project_image"]:
        await message.answer_photo(photo=data["project_image"], caption=f'<b>{data["project_name"]}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{data["project_description"]}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{data["project_requirements"]}', reply_markup=confirm_kb)
    else:
        await message.answer(f'<b>{data["project_name"]}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{data["project_description"]}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{data["project_requirements"]}', reply_markup=confirm_kb)        
        
        
@base_project_router.callback_query(StateFilter(UpdateProject.project_confirm))
async def confirm_update_project(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    
    if callback.data == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        project_id = data.pop("project_id")
        
        image = InputMediaPhoto(media=data["project_image"], caption=f'<b>{data["project_name"]}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{data["project_description"]}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{data["project_requirements"]}') if data["project_image"] else None
        
        await update_project_by_id(session=session, project_id=project_id, data=data)
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
        if not data["project_image"]:
            await callback.message.edit_text(f'<b>{data["project_name"]}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{data["project_description"]}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{data["project_requirements"]}', 
                                             reply_markup=get_callback_btns(btns={"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"delete_project_{project_id}", "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"update_project_{project_id}"}))
        else:
            await callback.message.edit_media(media=image, 
                                              reply_markup=get_callback_btns(btns={"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"delete_project_{project_id}", "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç": f"update_project_{project_id}"}))
            
        await callback.message.answer("–í–∞—à –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=profile_kb)
    else:
        await state.clear()
        await callback.message.delete()
        await callback.answer("–û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        await callback.message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=profile_kb)
        
        
    await state.clear()