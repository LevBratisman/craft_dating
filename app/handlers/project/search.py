from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio

from app.database.dao.user import set_iterator, get_iterator, get_full_user_info, get_project_iterator, set_project_iterator, get_uni_id_by_user_id
from app.database.dao.filter import get_filter
from app.database.dao.like import add_liked_user, get_like
from app.database.dao.project import get_project_by_id, get_projects_by_uni_id
from app.database.dao.request import add_request, get_requests_by_project_id

from app.keyboards.reply import get_keyboard
from app.keyboards.inline import get_callback_btns

from app.handlers.base import register_kb
from app.services.search import search_users

from app.keyboards.reply import get_menu_keyboard


search_project_router = Router()


class SendRequest(StatesGroup):
    project_id = State()
    text = State()


project_search_kb = get_keyboard(
    "–î–∞–ª–µ–µ",
    "üö™",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2, )
)


@search_project_router.message(StateFilter(None), F.text.in_(["üí°–ò—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", "–î–∞–ª–µ–µ"]))
async def start_search_project(message: Message, session: AsyncSession):
    
    user = await get_full_user_info(session, message.from_user.id)
    
    if user:
        target_projects = await get_projects_by_uni_id(session, user.uni_id)
        iter = user.project_iterator
        
        if target_projects:
            await message.answer("üîç", reply_markup=project_search_kb)
            try:
                current_project = target_projects[iter]
                bid_keyboard = get_callback_btns(
                    btns={"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É": f"request_{current_project.id}"},
                )
                if current_project.project_image:
                    await message.answer_photo(current_project.project_image, caption=f'<b>{current_project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{current_project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{current_project.project_description}', reply_markup=bid_keyboard)
                else:
                    await message.answer(f'<b>{current_project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{current_project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{current_project.project_description}', reply_markup=bid_keyboard)
                await set_iterator(session, message.from_user.id, iter + 1)
            except IndexError:
                iter = 0
                current_project = target_projects[iter]
                bid_keyboard = get_callback_btns(
                    {"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É": f"request_{current_project.id}"},
                )
                if current_project.project_image:
                    await message.answer_photo(current_project.project_image, caption=f'<b>{current_project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{current_project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{current_project.project_description}', reply_markup=bid_keyboard)
                else:
                    await message.answer(f'<b>{current_project.project_name}</b>\n\n<b>–û–ü–ò–°–ê–ù–ò–ï</b>\n{current_project.project_description}\n\n<b>–ö–û–ì–û –ò–©–ï–ú?</b>\n{current_project.project_description}', reply_markup=bid_keyboard)
                await set_iterator(session, message.from_user.id, 1)
        else:
            await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ")
        
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É", reply_markup=register_kb)
        
    await asyncio.shield(session.close())

        
        
        
@search_project_router.message(StateFilter(None), F.text == "üö™")
async def back(message: Message):
    await message.answer("–ú–µ–Ω—é", reply_markup=await get_menu_keyboard(user_id=message.from_user.id))
    
    
    
@search_project_router.callback_query(StateFilter(None), F.data.contains("request_"))
async def bid(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    project_id = int(callback.data.split("_")[1])
    await state.set_state(SendRequest.text)
    await state.update_data(project_id=project_id)
    
    if await get_requests_by_project_id(session, project_id):
        await callback.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É")
        await state.clear()
        return
    
    await callback.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏")
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏", reply_markup=ReplyKeyboardRemove())
    
    
    
@search_project_router.message(StateFilter(SendRequest.text), F.text)
async def get_text(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    await state.update_data(text=message.text)
    data = await state.get_data()
    project_id = data.pop("project_id")
    project = await get_project_by_id(session, project_id)
    
    data = {
        "user_id": message.from_user.id,
        "project_id": project_id,
        "creator_id": project.user_id,
        "text": message.text
    }
    await add_request(session, data)
    await state.clear()
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    await bot.send_message(project.user_id, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç!")
    await start_search_project(message, session)
    